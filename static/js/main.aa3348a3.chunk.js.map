{"version":3,"sources":["TinderButtonMui/Header.js","TinderButtonMui/Chats.js","TinderButtonMui/Home.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","justifyContent","alignItems","borderBottom","marginLeft","marginRight","icons","padding","outline","logo","height","width","objectFit","Header","backBtn","history","useHistory","classes","Grid","className","IconButton","onClick","replace","fontSize","to","src","alt","flexDirection","margin","spacing","img","name","color","textDecoration","people","Chats","map","p","container","Avatar","Chat","useParams","Tinder","Profile","TinderHome","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6VASMA,EAAYC,aAAW,SAAAC,GAAK,MAAI,CAClCC,KAAK,CACDC,QAAQ,OACRC,eAAgB,gBAChBC,WAAW,SACXC,aAAa,oBACbC,WAAW,KACXC,YAAY,MAEhBC,MAAM,CACFC,QAAQ,OAERC,QAAQ,mBAEZC,KAAK,CACDC,OAAO,OACPC,MAAM,OACNC,UAAU,eAkCHC,MA9Bf,YAA4B,IAAXC,EAAU,EAAVA,QACPC,EAAUC,cACVC,EAAUrB,IAChB,OACI,kBAACsB,EAAA,EAAD,CAAMC,UAAWF,EAAQlB,MACxBe,EACG,kBAACM,EAAA,EAAD,CAAYD,UAAWF,EAAQX,MAAOe,QAAS,kBAAIN,EAAQO,QAAQR,KAC/D,kBAAC,IAAD,CAAmBS,SAAS,WAGhC,kBAAC,IAAD,CAAMC,GAAG,YACT,kBAACJ,EAAA,EAAD,CAAYD,UAAWF,EAAQX,OAC3B,kBAAC,IAAD,CAAaiB,SAAS,YAK9B,kBAAC,IAAD,CAAMC,GAAG,KACT,yBAAKC,IAAI,2BAA2BC,IAAI,SAASP,UAAWF,EAAQR,QAEpE,kBAAC,IAAD,CAAMe,GAAG,SACT,kBAACJ,EAAA,EAAD,CAAYD,UAAWF,EAAQX,OAC3B,kBAAC,IAAD,CAAWiB,SAAS,c,gBChD1B3B,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACJC,QAAS,OACT2B,cAAc,SACd,QAAS,CACPC,OAAQ9B,EAAM+B,QAAQ,KAG1BC,IAAI,CAEAzB,YAAY,KACZD,WAAW,MAEf2B,KAAK,CACDC,MAAM,QACNC,eAAe,uBAIjBC,EAAS,CAAC,CACZH,KAAK,gBACLD,IAAI,kBAER,CACIC,KAAK,aACLD,IAAI,kBAER,CACIC,KAAK,iBACLD,IAAI,mBAqBOK,MAlBf,WACI,IAAMlB,EAAUrB,IAChB,OACI,yBAAKuB,UAAWF,EAAQlB,MACvBmC,EAAOE,KAAI,SAAAC,GAAC,OACT,kBAAC,IAAD,CAAMb,GAAE,gBAAWa,EAAEN,OACrB,kBAACb,EAAA,EAAD,CAAMoB,WAAS,GACf,kBAACC,EAAA,EAAD,CAAQd,IAAKY,EAAEP,IAAKX,UAAWF,EAAQa,MACvC,uBAAGX,UAAWF,EAAQc,MAAOM,EAAEN,aCb3C,IAAMS,EAAO,WAAM,IACVT,EAAQU,cAARV,KACL,OACI,yBAAKZ,UAAU,eAAf,mBAA6C,4BAAKY,KAGpDW,EAAS,WACX,OACI,yBAAKvB,UAAU,eAAf,uBAGFwB,EAAU,WACZ,OACI,yBAAKxB,UAAU,eAAf,yBAIOyB,EA3Cf,WAEI,OACI,kBAAC,IAAD,KAEI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,eACR,kBAAC,EAAD,CAAQ/B,QAAQ,UAChB,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAO+B,KAAK,SACR,kBAAC,EAAD,CAAQ/B,QAAQ,MAChB,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAO+B,KAAK,YACR,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,KACP,kBAAC,EAAD,MACD,kBAAC,EAAD,UCLLC,MAXf,WACE,OACE,yBAAK3B,UAAU,OACd,wBAAIA,UAAU,2BAAd,oBAEC,kBAAC,EAAD,QCFc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aa3348a3.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Link,useHistory} from 'react-router-dom';\r\nimport {IconButton,Grid} from '@material-ui/core';\r\nimport {makeStyles} from '@material-ui/styles'\r\n// import {PersonIcon,ForumIcon} from '@material-ui/icons'\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport ForumIcon from '@material-ui/icons/Forum';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\n\r\nconst useStyles = makeStyles(theme =>({\r\n    root:{\r\n        display:'flex',\r\n        justifyContent :'space-between',\r\n        alignItems:'center',\r\n        borderBottom:'1px solid #f9f9f9',\r\n        marginLeft:'4%',\r\n        marginRight:'4%',\r\n    },\r\n    icons:{\r\n        padding:'20px',\r\n        // border:'none !important',\r\n        outline:'none !important',\r\n    },\r\n    logo:{\r\n        height:'40px',\r\n        width:'40px',\r\n        objectFit:'contain'\r\n    }\r\n\r\n}))\r\nfunction Header({backBtn}) {\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid className={classes.root}>\r\n        {backBtn ? (\r\n            <IconButton className={classes.icons} onClick={()=>history.replace(backBtn)}>\r\n                <ArrowBackIosIcon  fontSize=\"large\"/>\r\n            </IconButton>\r\n        ):(\r\n            <Link to='/profile'>\r\n            <IconButton className={classes.icons}>\r\n                <PersonIcon  fontSize=\"large\"/>\r\n            </IconButton>\r\n            </Link>\r\n        )}\r\n        \r\n        <Link to='/'>\r\n        <img src=\"./images/tinder-logo.png\" alt=\"tinder\" className={classes.logo}/>\r\n        </Link>\r\n        <Link to='/chat'>\r\n        <IconButton className={classes.icons}>\r\n            <ForumIcon fontSize=\"large\"/>\r\n        </IconButton>\r\n        \r\n        </Link>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Avatar,Grid} from '@material-ui/core';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      flexDirection:'column',\r\n      '& > *': {\r\n        margin: theme.spacing(2),\r\n      },\r\n    },\r\n    img:{\r\n        // display:'flex',\r\n        marginRight:'3%',\r\n        marginLeft:'5%'\r\n    },\r\n    name:{\r\n        color:'black',\r\n        textDecoration:'none !important'\r\n\r\n    }\r\n}));\r\nconst people = [{\r\n    name:'Asikur Rahman',\r\n    img:'./images/1.png'\r\n},\r\n{\r\n    name:'Aleen Rose',\r\n    img:'./images/2.png'\r\n},\r\n{\r\n    name:'Mazharul Islam',\r\n    img:'./images/3.png'\r\n},\r\n]\r\nfunction Chats() {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n        {people.map(p => (\r\n            <Link to={`/chat/${p.name}`}>\r\n            <Grid container >\r\n            <Avatar src={p.img} className={classes.img}/>\r\n            <p className={classes.name}>{p.name}</p>\r\n            </Grid>\r\n            </Link>\r\n            ))}\r\n      \r\n      \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Chats\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport {BrowserRouter as Router,Route,Switch,useParams} from 'react-router-dom';\r\nimport Chats from './Chats';\r\n\r\nfunction TinderHome() {\r\n   \r\n    return (\r\n        <Router>\r\n            {/* Actual routing implementation*/}\r\n            <Switch>\r\n                <Route path='/chat/:name'>\r\n                    <Header backBtn=\"/chat\"/> \r\n                    <Chat />\r\n                </Route>\r\n                <Route path='/chat'>\r\n                    <Header backBtn=\"/\"/> \r\n                    <Chats />\r\n                </Route>\r\n                <Route path='/profile'>\r\n                    <Header />\r\n                    <Profile />\r\n                </Route>\r\n                <Route path='/'>\r\n                     <Header /> \r\n                    <Tinder />\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\nconst Chat = () =>{\r\n    let {name} = useParams();\r\n    return (\r\n        <div className=\"text-center\">We are Chatting <h4>{name}</h4></div>\r\n    )\r\n}\r\nconst Tinder = () =>{\r\n    return (\r\n        <div className=\"text-center\">We are Tinder Home</div>\r\n    )\r\n}\r\nconst Profile = () =>{\r\n    return (\r\n        <div className=\"text-center\">I am Nahid,from NSTU</div>\r\n    )\r\n}\r\n\r\nexport default TinderHome\r\n","import React from 'react';\nimport './App.css';\n// import Main from './Pagination-hooks/Main';\n// import GridTest from './MUI/Grid'\n// import ThemeNesting from './MUI/Theming'\n// import ButtonBase from './MUI/ButtonBase'\nimport TinderHome from './TinderButtonMui/Home';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <h3 className=\"text-danger text-center\">React PlayGround</h3>\n      {/* <ButtonBase /> */}\n      <TinderHome />\n      {/* <Main /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}